type ApiError = variant {
  SerializeError : ErrorMessage;
  DeserializeError : ErrorMessage;
  NotFound : ErrorMessage;
  ValidationError : vec ValidationResponse;
  CanisterAtCapacity : ErrorMessage;
  UpdateRequired : UpdateMessage;
  Unauthorized : ErrorMessage;
  Unexpected : ErrorMessage;
  BadRequest : ErrorMessage;
};
type ApplicationRole = variant {
  Blocked;
  Guest;
  Member;
  Banned;
  Admin;
  Moderator;
  Leader;
  Owner;
  Watcher;
};
type Asset = variant { Url : text; None; CanisterStorage : CanisterStorage };
type CanisterStorage = variant { None; Manifest : Manifest; Chunk : ChunkData };
type CanisterType = variant {
  Empty;
  Foundation;
  Custom;
  ScalableChild;
  Scalable;
};
type ChunkData = record {
  chunk_id : nat64;
  canister : principal;
  index : nat64;
};
type CodeOfConductDetails = record {
  approved_date : nat64;
  approved_version : nat64;
};
type DateRange = record { end_date : nat64; start_date : nat64 };
type ErrorMessage = record {
  tag : text;
  message : text;
  inputs : opt vec text;
  location : text;
};
type FilterType = variant { Or; And };
type HttpHeader = record { value : text; name : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Manifest = record { entries : vec ChunkData };
type PagedResponse = record {
  total : nat64;
  data : vec ProfileResponse;
  page : nat64;
  limit : nat64;
  number_of_pages : nat64;
};
type ProfileFilter = variant {
  Interest : nat32;
  Email : text;
  Skill : nat32;
  DisplayName : text;
  UpdatedOn : DateRange;
  City : text;
  FirstName : text;
  LastName : text;
  Cause : nat32;
  StateOrProvince : text;
  Country : text;
  CreatedOn : DateRange;
  Username : text;
};
type ProfilePrivacy = variant { Private; Public };
type ProfileResponse = record {
  updated_on : nat64;
  profile_image : Asset;
  "principal" : principal;
  banner_image : Asset;
  about : text;
  country : text;
  username : text;
  interests : vec nat32;
  city : text;
  created_on : nat64;
  email : text;
  website : text;
  display_name : text;
  extra : text;
  privacy : ProfilePrivacy;
  wallets : vec WalletResponse;
  state_or_province : text;
  first_name : text;
  last_name : text;
  member_identifier : principal;
  causes : vec nat32;
  code_of_conduct : CodeOfConductDetails;
  date_of_birth : nat64;
  identifier : principal;
  skills : vec nat32;
  application_role : ApplicationRole;
};
type ProfileSort = variant {
  Email : SortDirection;
  DisplayName : SortDirection;
  UpdatedOn : SortDirection;
  City : SortDirection;
  FirstName : SortDirection;
  LastName : SortDirection;
  StateOrProvince : SortDirection;
  Country : SortDirection;
  CreatedOn : SortDirection;
  Username : SortDirection;
};
type Result = variant { Ok : principal; Err : ApiError };
type Result_1 = variant { Ok : ScalableCanisterDetails; Err : text };
type ScalableCanisterDetails = record {
  entry_range : record { nat64; opt nat64 };
  "principal" : principal;
  wasm_version : WasmVersion;
  is_available : bool;
  canister_type : CanisterType;
};
type SortDirection = variant { Asc; Desc };
type UpdateMessage = record { canister_principal : principal; message : text };
type ValidationResponse = record { field : text; message : text };
type WalletResponse = record {
  "principal" : principal;
  provider : text;
  is_primary : bool;
};
type WasmVersion = variant { None; Version : nat64; Custom };
service : (text, principal, principal) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  accept_cycles : () -> (nat64);
  close_child_canister_and_spawn_sibling : (
      principal,
      nat64,
      vec nat8,
      opt principal,
    ) -> (Result);
  get_available_canister : () -> (Result_1) query;
  get_canisters : () -> (vec ScalableCanisterDetails) query;
  get_latest_wasm_version : () -> (WasmVersion) query;
  get_profiles : (nat64, nat64, vec ProfileFilter, FilterType, ProfileSort) -> (
      PagedResponse,
    ) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
}